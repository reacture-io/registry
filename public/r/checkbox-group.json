{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "checkbox-group",
  "type": "registry:component",
  "title": "Checkbox Group",
  "description": "A group of checkboxes",
  "dependencies": ["class-variance-authority", "@radix-ui/react-checkbox"],
  "registryDependencies": ["checkbox"],
  "files": [
    {
      "path": "registry/components/checkbox-group.tsx",
      "content": "import { type FC, useCallback, useMemo } from \"react\";\nimport type { CheckedState } from \"@radix-ui/react-checkbox\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { Checkbox } from \"@/components/ui/checkbox\";\n\nexport interface CheckboxGroupItemOption {\n  label?: string;\n  value: string;\n  disabled?: boolean;\n}\n\nconst checkboxGroupVariants = cva(\"relative flex\", {\n  variants: {\n    orientation: {\n      horizontal: \"flex-row gap-2 items-center\",\n      vertical: \"flex-col gap-2\",\n    },\n    reverse: {\n      horizontal: \"flex-row-reverse justify-end\",\n      vertical: \"flex-col-reverse\",\n    },\n  },\n  defaultVariants: {\n    orientation: \"vertical\",\n  },\n});\n\ninterface CheckboxGroupProps\n  extends VariantProps<typeof checkboxGroupVariants> {\n  options: Array<CheckboxGroupItemOption>;\n  checked: Array<string>;\n  onChange: (checked: Array<string>) => void;\n}\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\",\n  {\n    variants: {\n      disabled: {\n        true: \"opacity-50\",\n      },\n    },\n    defaultVariants: {\n      disabled: false,\n    },\n  }\n);\n\ninterface CheckboxGroupItemProps extends Omit<CheckboxGroupProps, \"options\"> {\n  option: CheckboxGroupItemOption;\n}\nconst CheckboxGroupItem: FC<CheckboxGroupItemProps> = ({\n  option,\n  checked,\n  onChange,\n}) => {\n  const isChecked = useMemo(\n    () => checked.includes(option.value),\n    [checked, option.value]\n  );\n\n  const handleCheckedChange = useCallback(\n    (_checked: CheckedState) => {\n      const values = _checked\n        ? [...checked, option.value]\n        : checked.filter((_option) => _option !== option.value);\n      onChange(values);\n    },\n    [checked, onChange, option.value]\n  );\n\n  return (\n    <span className=\"flex items-center gap-2\">\n      <Checkbox\n        id={option.value}\n        disabled={option.disabled}\n        checked={isChecked}\n        onCheckedChange={handleCheckedChange}\n      />\n      {option.label && (\n        <label\n          htmlFor={option.value}\n          className={labelVariants({ disabled: option.disabled })}\n        >\n          {option.label}\n        </label>\n      )}\n    </span>\n  );\n};\n\nconst CheckboxGroup: FC<CheckboxGroupProps> = ({\n  options,\n  checked,\n  onChange,\n  orientation,\n}) => (\n  <div className={checkboxGroupVariants({ orientation })}>\n    {options.map((option) => (\n      <CheckboxGroupItem\n        key={option.value}\n        option={option}\n        checked={checked}\n        onChange={onChange}\n      />\n    ))}\n  </div>\n);\nexport default CheckboxGroup;\n",
      "type": "registry:component"
    }
  ],
  "categories": ["form"]
}
