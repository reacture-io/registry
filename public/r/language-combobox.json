{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "language-combobox",
  "type": "registry:component",
  "title": "Language Combobox",
  "description": "A language combobox component",
  "dependencies": ["@reacture-io/iso-locale"],
  "registryDependencies": ["https://ui.reacture.io/r/combobox"],
  "files": [
    {
      "path": "registry/components/language-combobox.tsx",
      "content": "import { type FC, useCallback, useMemo } from \"react\";\nimport { languages } from \"@reacture-io/iso-locale/languages\";\n\nimport type {\n  CmdkFilterHandler,\n  ComboboxProps,\n} from \"@/registry/components/combobox\";\nimport Combobox from \"@/registry/components/combobox\";\n\ninterface LanguageComboboxProps extends Omit<ComboboxProps<false>, \"options\"> {\n  native?: boolean;\n}\nconst LanguageCombobox: FC<LanguageComboboxProps> = ({ native, ...props }) => {\n  const options = useMemo(\n    () =>\n      Object.values(languages).map((language) => ({\n        label: native ? language.native : language.language,\n        value: language.iso639_1,\n        keywords: [\n          language.language.toLowerCase(),\n          language.iso639_1.toLowerCase(),\n          language.iso639_3.toLowerCase(),\n          language.native.toLowerCase(),\n        ],\n      })),\n    [native]\n  );\n\n  const handleFilter: CmdkFilterHandler = useCallback(\n    (_, search, keywords) =>\n      keywords?.some((keyword) => keyword.includes(search.toLowerCase()))\n        ? 1\n        : 0,\n    []\n  );\n\n  return (\n    <Combobox\n      {...props}\n      options={options}\n      onFilter={handleFilter}\n      placeholder=\"Select a language\"\n    />\n  );\n};\n\nexport default LanguageCombobox;\n",
      "type": "registry:component"
    }
  ],
  "categories": ["form"]
}
