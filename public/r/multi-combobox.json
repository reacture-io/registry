{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "multi-combobox",
  "type": "registry:component",
  "title": "Multi Combobox",
  "description": "A multi combobox component",
  "dependencies": ["cmdk", "lucide-react"],
  "registryDependencies": ["badge", "button", "command", "popover"],
  "files": [
    {
      "path": "registry/components/multi-combobox.tsx",
      "content": "\"use client\";\n\nimport {\n  type ElementRef,\n  type ReactNode,\n  useCallback,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { Command as CommandPrimitive } from \"cmdk\";\nimport { Check, ChevronsUpDown, Plus, X } from \"lucide-react\";\n\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { cn } from \"@/lib/utils\";\n\n/**\n * Copied straight from `cmdk`\n *\n * Custom filter function for whether each command menu item should matches the given search query.\n * It should return a number between 0 and 1, with 1 being the best match and 0 being hidden entirely.\n * By default, uses the `command-score` library.\n */\ntype CmdkFilterHandler = (\n  value: string,\n  search: string,\n  keywords?: Array<string>\n) => number;\n\ninterface Option {\n  label: string | ReactNode;\n  value: string;\n  keywords?: Array<string>;\n}\n\ninterface GroupedOption extends Option {\n  group: string;\n}\n\nexport interface MultiComboboxProps<Grouped extends boolean> {\n  values: Array<string> | undefined;\n  grouped?: Grouped;\n  options: Grouped extends true ? Array<GroupedOption> : Array<Option>;\n  placeholder?: string;\n  empty?: string;\n  disabled?: boolean;\n  className?: string;\n  onChange: (values: Array<string>) => void;\n  onFilter?: CmdkFilterHandler;\n  onAddOption?: (value: string) => void;\n}\n\nconst MultiCombobox = <Grouped extends boolean>({\n  values,\n  grouped,\n  options: _options,\n  placeholder,\n  empty,\n  disabled,\n  className,\n  onChange,\n  onFilter,\n  onAddOption,\n}: MultiComboboxProps<Grouped>) => {\n  const inputRef = useRef<ElementRef<typeof CommandPrimitive.Input>>(null);\n  const [open, setOpen] = useState(false);\n\n  const handleFilter: CmdkFilterHandler = useCallback(\n    (itemValue, search, keywords) => {\n      if (typeof onFilter === \"function\") {\n        return onFilter(itemValue, search, keywords);\n      }\n      const hasKeyword = keywords?.some((keyword) =>\n        keyword.includes(search.toLowerCase())\n      );\n      if (hasKeyword) {\n        return 1;\n      }\n      const label = _options.find(\n        (option) => option.value === itemValue\n      )?.label;\n      if (typeof label !== \"string\") {\n        return 0;\n      }\n      return label.toLowerCase().includes(search.toLowerCase()) ? 1 : 0;\n    },\n    [onFilter, _options]\n  );\n\n  const handleSelect = useCallback(\n    (value: string) => {\n      const isSelected = !!values?.includes(value);\n      onChange(\n        isSelected\n          ? (values ?? []).filter((_value) => _value !== value)\n          : [...(values ?? []), value]\n      );\n    },\n    [values, onChange]\n  );\n\n  const handleRemove = useCallback(\n    (value: string) => {\n      onChange((values ?? []).filter((_value) => _value !== value));\n    },\n    [values, onChange]\n  );\n\n  const handleAddOption = useCallback(() => {\n    if (typeof onAddOption === \"function\" && inputRef.current) {\n      const value = inputRef.current.value;\n      if (value) {\n        onAddOption(value);\n        onChange([...(values ?? []), value]);\n      }\n    }\n  }, [onAddOption, onChange, values]);\n\n  const selected = useMemo(() => {\n    const _selected = [];\n    for (const value of values ?? []) {\n      const option = _options.find((_option) => _option.value === value);\n      if (option) {\n        if (typeof option.label === \"string\") {\n          const Chip = (\n            <Badge key={option.value}>\n              {option.label}\n              <X\n                onClick={() => {\n                  handleRemove(option.value);\n                }}\n              />\n            </Badge>\n          );\n          _selected.push(Chip);\n        } else {\n          _selected.push(option.label);\n        }\n      }\n    }\n    return _selected;\n  }, [values, _options, handleRemove]);\n\n  const allowCustomOptions = useMemo(\n    () => typeof onAddOption === \"function\",\n    [onAddOption]\n  );\n\n  const groups = useMemo(() => {\n    if (!grouped) {\n      return { \"\": _options };\n    }\n    const _groups: Record<string, Array<GroupedOption>> = {};\n    for (const option of _options as Array<GroupedOption>) {\n      if (Array.isArray(_groups[option.group])) {\n        _groups[option.group].push(option);\n      } else {\n        _groups[option.group] = [option];\n      }\n    }\n    return _groups;\n  }, [grouped, _options]);\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          className={cn(className, \"flex flex-wrap justify-start gap-1\")}\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          disabled={disabled}\n        >\n          {Array.isArray(selected) && selected.length > 0\n            ? selected\n            : placeholder}\n          <ChevronsUpDown className=\"opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-full p-0\">\n        <Command filter={handleFilter}>\n          <CommandInput ref={inputRef} />\n          <CommandList>\n            {allowCustomOptions ? (\n              <CommandEmpty className={\"flex flex-col items-center p-1\"}>\n                <span className=\"text-sm\">{empty}</span>\n                <Button\n                  variant={\"ghost\"}\n                  size={\"sm\"}\n                  className=\"m-auto\"\n                  onClick={handleAddOption}\n                >\n                  <Plus />\n                  Add Option\n                </Button>\n              </CommandEmpty>\n            ) : (\n              <CommandEmpty>{empty}</CommandEmpty>\n            )}\n            {Object.entries(groups).map(([group, options]) => (\n              <CommandGroup key={group} heading={group}>\n                {options.map((option) => (\n                  <CommandItem\n                    key={option.value}\n                    value={option.value}\n                    keywords={option.keywords}\n                    onSelect={handleSelect}\n                  >\n                    {option.label}\n                    <Check\n                      className={cn(\n                        \"ml-auto\",\n                        values?.includes(option.value)\n                          ? \"opacity-100\"\n                          : \"opacity-0\"\n                      )}\n                    />\n                  </CommandItem>\n                ))}\n              </CommandGroup>\n            ))}\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n};\n\nexport default MultiCombobox;\n",
      "type": "registry:component"
    }
  ],
  "categories": ["form"]
}
